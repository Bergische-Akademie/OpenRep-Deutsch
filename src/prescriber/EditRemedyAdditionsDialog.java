/*Copyright 2008 by Vladimir Polony, Stupy 24, Banska Bystrica, Slovakia

This file is part of OpenRep FREE homeopathic software.

    OpenRep FREE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenRep FREE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OpenRep FREE.  If not, see <http://www.gnu.org/licenses/>.*/

/* Opens the dialog containig the Remedy Additions in a symptom
 * 
 *
 * Created on August 9, 2008, 11:33 PM
 */

package prescriber;

import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author  vladimir
 */
public class EditRemedyAdditionsDialog extends javax.swing.JDialog {
    /** contains the instance of the currently opened repertory */
    public Repertory current_repertory = null;
    /** contains the name of the symptom to which the remedy additions belong to*/
    public String SymptomName = null;
    /** contains the main frame of the application */
    public JFrame mainFrame = null;
    /** contains indicator whether used has performed some changes*/
    public boolean changes = false;
    /** instance of main editor */
    PrescriberView main_editor;
    /** Updates the contents of the RemedySymptoms tree based on the SelectedSymptoms tree
     * 
     */
    public void UpdateRemedySymptomsTree () {
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Results");
        if (current_repertory == null) return;
        ArrayList<SelectedRemSymptom> remedies = current_repertory.GetRemedySymptom(SymptomName);
        ArrayList<String> s = new ArrayList();
        for (int x = 0; x < remedies.size(); x++) 
            s.add(Utils.REMSYMPTOM_GRADE_START+(int)(remedies.get(x).RemGrade*current_repertory.GetMaximumGrade())+Utils.REMSYMPTOM_GRADE_END + remedies.get(x).Remname);
        ArrayList<String> sorted_remedies = Repertory.SortRemSymptomArrayList(s);
        for (int x = 0; x < sorted_remedies.size(); x++) {
            // add the symptom
            DefaultMutableTreeNode temp = new DefaultMutableTreeNode(sorted_remedies.get(x));
            // get the remedy list - if there is 
                top.add(temp);
        }
        // update the model of the RemSymptoms tree
        JTree x = new JTree(top);
        RemedyTree.setModel(x.getModel());
    }    
    
    /** Creates new form EditRemedyAdditionsDialog */
    public EditRemedyAdditionsDialog(java.awt.Frame parent, boolean modal, PrescriberView pw) {
        super(parent, modal);
        initComponents();
        this.main_editor = pw;

        int size = pw.config.GetValue(Configuration.Key_EditRemedyAdditionsDialog_RemedyList);
        Font ft;
        if (size != -1) {
            ft = new Font(RemedyTree.getFont().getName(), RemedyTree.getFont().getStyle(), size);
            RemedyTree.setFont(ft);
        }

        if (current_repertory == null || SymptomName == null) return;
        UpdateRemedySymptomsTree();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SymptomNameLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        RemedyTree = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(prescriber.PrescriberApp.class).getContext().getResourceMap(EditRemedyAdditionsDialog.class);
        SymptomNameLabel.setText(resourceMap.getString("SymptomNameLabel.text")); // NOI18N
        SymptomNameLabel.setName("SymptomNameLabel"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        RemedyTree.setModel(null);
        RemedyTree.setName("RemedyTree"); // NOI18N
        RemedyTree.setRootVisible(false);
        RemedyTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RemedyTreeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(RemedyTree);

        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(1);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setToolTipText(resourceMap.getString("jButton3.toolTipText")); // NOI18N
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setIcon(resourceMap.getIcon("jButton4.icon")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setToolTipText(resourceMap.getString("jButton4.toolTipText")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton5.setIcon(resourceMap.getIcon("jButton5.icon")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setToolTipText(resourceMap.getString("jButton5.toolTipText")); // NOI18N
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setName("jButton5"); // NOI18N
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(SymptomNameLabel)
                    .add(jLabel2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(6, 6, 6)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .add(174, 174, 174)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(SymptomNameLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 248, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    int result = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete the selected remedy additions?");
    if (result != JOptionPane.OK_OPTION) return;
    int symptom_idx = current_repertory.GetSymptomIndex(SymptomName);
    for (int x = 0; x < RemedyTree.getSelectionCount(); x++) {
        String rem_name = RemedyTree.getSelectionPaths()[x].toString();
        rem_name = rem_name.substring(rem_name.indexOf(Utils.REMSYMPTOM_GRADE_END) + Utils.REMSYMPTOM_GRADE_END.length(), rem_name.length() - 1);
        current_repertory.DeleteRemedyAddition(symptom_idx, current_repertory.GetRemedyIndex(rem_name));
        changes = true;
    }
    UpdateRemedySymptomsTree();
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
   changes = true;
   AddRemedyDialog ard = new AddRemedyDialog(mainFrame, true, main_editor);
   ard.setLocationRelativeTo(mainFrame);
   ard.mainFrame = mainFrame;
   ard.current_repertory = current_repertory;
   ard.UpdateRemedySymptomsTree();
   ard.setVisible(true);
   if (ard.remedy_id.size() == 0) return;
   byte[] sourceids = new byte[1];
   sourceids[0] = -1;
   for (int x = 0; x < ard.remedy_id.size(); x++) {
       current_repertory.AddRemedyAddition((int)current_repertory.GetSymptomIndex(SymptomName), (short)ard.remedy_id.get(x), (byte)1, sourceids, true);
   }
   UpdateRemedySymptomsTree();
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
   changes = true;
   if (RemedyTree.getSelectionCount() == 0) {
       JOptionPane.showMessageDialog(rootPane, "Please select at least one remedy to edit.");
       return;
   }
   String rem_name = RemedyTree.getSelectionPath().toString();
   rem_name = rem_name.substring(rem_name.indexOf(Utils.REMSYMPTOM_GRADE_END) + Utils.REMSYMPTOM_GRADE_END.length(), rem_name.length() - 1);
   String val = JOptionPane.showInputDialog("New remedy grade: ", "1");
   int new_grade = 1;
   try {
       new_grade = Integer.parseInt(val);
   }
   catch (Exception e) {
       JOptionPane.showMessageDialog(rootPane, "Please enter a valid new grade");
       return;
   }
   if (new_grade > Byte.MAX_VALUE) {
       JOptionPane.showMessageDialog(rootPane, "The grade value is too high (maximum grade value is 255). Please select a different grade");
       return;
   }
   if (new_grade > current_repertory.GetMaximumGrade()) {
       current_repertory.SetMaximumGrade((byte)new_grade);
   }
   for (int x = 0; x < RemedyTree.getSelectionCount(); x++) {
      rem_name = RemedyTree.getSelectionPaths()[x].toString();
      rem_name = rem_name.substring(rem_name.indexOf(Utils.REMSYMPTOM_GRADE_END) + Utils.REMSYMPTOM_GRADE_END.length(), rem_name.length() - 1);
      current_repertory.SetRemedyGrade(current_repertory.GetSymptomIndex(SymptomName), (short)current_repertory.GetRemedyIndex(rem_name), (byte)new_grade, (byte)-1);
   }
   UpdateRemedySymptomsTree();
}//GEN-LAST:event_jButton5ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_jButton1ActionPerformed

private void RemedyTreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RemedyTreeKeyPressed
    if (evt.isAltDown()) {
        if (evt.getKeyCode() == evt.VK_UP) {
            Utils.ChangeFont(RemedyTree, 1);
            main_editor.config.SetValue(Configuration.Key_EditRemedyAdditionsDialog_RemedyList, RemedyTree.getFont().getSize());
        }
        else
        if (evt.getKeyCode() == evt.VK_DOWN) {
            Utils.ChangeFont(RemedyTree, -1);
            main_editor.config.SetValue(Configuration.Key_EditRemedyAdditionsDialog_RemedyList, RemedyTree.getFont().getSize());
        }
    }
}//GEN-LAST:event_RemedyTreeKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTree RemedyTree;
    public javax.swing.JLabel SymptomNameLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
