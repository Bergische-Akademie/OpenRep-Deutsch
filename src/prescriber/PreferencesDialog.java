/*Copyright 2008 by Vladimir Polony, Stupy 24, Banska Bystrica, Slovakia

This file is part of OpenRep FREE homeopathic software.

    OpenRep FREE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenRep FREE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OpenRep FREE.  If not, see <http://www.gnu.org/licenses/>.*/

/* This dialog is used to set preferences of OpenRep
 *
 * Created on August 29, 2008, 9:02 AM
 */

package prescriber;

import java.util.ArrayList;

/**
 *
 * @author  vladimir
 */
public class PreferencesDialog extends javax.swing.JDialog {
    /** is set to true if OK was pressed or false if CANCEL was pressed*/
    public boolean ok_pressed = false;
    
    /** Creates new form PreferencesDialog */
    public PreferencesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        RepertoryNamesComboBox = new javax.swing.JComboBox();
        AutomaticSaveCheckbox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        AutomaticRepertorizationCheckbox = new javax.swing.JCheckBox();
        SearchCheckbox = new javax.swing.JCheckBox();
        OpenPMSCheckbox = new javax.swing.JCheckBox();
        pro_search_combobox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(prescriber.PrescriberApp.class).getContext().getResourceMap(PreferencesDialog.class);
        OKButton.setText(resourceMap.getString("OKButton.text")); // NOI18N
        OKButton.setName("OKButton"); // NOI18N
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText(resourceMap.getString("CancelButton.text")); // NOI18N
        CancelButton.setName("CancelButton"); // NOI18N
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        RepertoryNamesComboBox.setName("RepertoryNamesComboBox"); // NOI18N

        AutomaticSaveCheckbox.setText(resourceMap.getString("AutomaticSaveCheckbox.text")); // NOI18N
        AutomaticSaveCheckbox.setName("AutomaticSaveCheckbox"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addContainerGap(302, Short.MAX_VALUE))
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RepertoryNamesComboBox, 0, 253, Short.MAX_VALUE)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(AutomaticSaveCheckbox)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(RepertoryNamesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(AutomaticSaveCheckbox)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jSeparator2.setName("jSeparator2"); // NOI18N

        AutomaticRepertorizationCheckbox.setText(resourceMap.getString("AutomaticRepertorizationCheckbox.text")); // NOI18N
        AutomaticRepertorizationCheckbox.setName("AutomaticRepertorizationCheckbox"); // NOI18N

        SearchCheckbox.setText(resourceMap.getString("SearchCheckbox.text")); // NOI18N
        SearchCheckbox.setEnabled(false);
        SearchCheckbox.setName("SearchCheckbox"); // NOI18N

        OpenPMSCheckbox.setText(resourceMap.getString("OpenPMSCheckbox.text")); // NOI18N
        OpenPMSCheckbox.setName("OpenPMSCheckbox"); // NOI18N

        pro_search_combobox.setText(resourceMap.getString("pro_search_combobox.text")); // NOI18N
        pro_search_combobox.setName("pro_search_combobox"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel3))
                    .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(SearchCheckbox)
                            .add(AutomaticRepertorizationCheckbox)
                            .add(OpenPMSCheckbox)
                            .add(pro_search_combobox))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AutomaticRepertorizationCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SearchCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(OpenPMSCheckbox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pro_search_combobox)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 423, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(layout.createSequentialGroup()
                .add(66, 66, 66)
                .add(OKButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(142, 142, 142)
                .add(CancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(OKButton)
                    .add(CancelButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
   ok_pressed = true;
   this.setVisible(false);
}//GEN-LAST:event_OKButtonActionPerformed

private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
   this.setVisible(false);
}//GEN-LAST:event_CancelButtonActionPerformed
    /** Sets the selected status of the "Automatic repertorization" checkbox
     * 
     * @param automatic_repertorization
     */
    public void UpdateAutomaticRepertorization (boolean automatic_repertorization) {
        AutomaticRepertorizationCheckbox.setSelected(automatic_repertorization);
    }

    public void UpdateProSearch (boolean value) {
        pro_search_combobox.setSelected(value);
    }

    public boolean GetProSearch() {
        return pro_search_combobox.isSelected();
    }

    /** Sets the selected status of the "Search in all repertories" checkbox
     * 
     * @param automatic_repertorization
     */    
    public void UpdateSearchInAllRepertories (boolean search) {
        SearchCheckbox.setSelected(search);
    }
    
    /** Sets the selected status of the "Automatically save the changes to repertory" checkbox
     * 
     * @param automatic_repertorization
     */    
    public void UpdateAutomaticSaveRepertory(boolean automatic_save) {
        AutomaticSaveCheckbox.setSelected(automatic_save);
    }
    
    /** Updates the names of repertories in the "open on startup" combobox
     * 
     * @param automatic_repertorization
     */    
    public void UpdateRepertoryNames (ArrayList<String> names) {
        RepertoryNamesComboBox.removeAllItems();
        for (int x = 0; x < names.size(); x++) 
            RepertoryNamesComboBox.addItem(names.get(x));
        try {
            RepertoryNamesComboBox.setSelectedIndex(0);
        } catch (Exception e) {}
    }

    /** Sets the OpenPMS checkbox
     *
     * @param open_pms
     */
    public void UpdateOpenPMS(boolean open_pms) {
        this.OpenPMSCheckbox.setSelected(open_pms);
    }
    
    /** Returns the name of the default repertory or "" if none was selected
     * 
     * @return
     */
    public String GetDefaultName () {
        if (RepertoryNamesComboBox.getSelectedIndex() == -1) return "";
        else
        return RepertoryNamesComboBox.getItemAt(RepertoryNamesComboBox.getSelectedIndex()).toString();
    }
    
    /** Returns the state of the AutomaticSave checkbox
     * 
     * @return
     */
    public boolean GetAutomaticSave() {
        return AutomaticSaveCheckbox.isSelected();
    }

    /** Returns the status of OpenPMSOnStartup checkbox
     * 
     * @return
     */
    public boolean GetOpenPMS() {
        return OpenPMSCheckbox.isSelected();
    }

    /** Returns the state of SearchCombobox
     * 
     * @return
     */
    public boolean GetSearchInAll () {
        return SearchCheckbox.isSelected();
    }
    
    /** returns the state of the AutomaticRepertorization checkbox
     * 
     * @return
     */
    public boolean GetAutomaticRepertorization () {
        return AutomaticRepertorizationCheckbox.isSelected();
    }
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AutomaticRepertorizationCheckbox;
    private javax.swing.JCheckBox AutomaticSaveCheckbox;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JCheckBox OpenPMSCheckbox;
    private javax.swing.JComboBox RepertoryNamesComboBox;
    private javax.swing.JCheckBox SearchCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox pro_search_combobox;
    // End of variables declaration//GEN-END:variables

}
