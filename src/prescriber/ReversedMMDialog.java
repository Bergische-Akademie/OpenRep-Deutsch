/*Copyright 2008 by Vladimir Polony, Stupy 24, Banska Bystrica, Slovakia

This file is part of OpenRep FREE homeopathic software.

    OpenRep FREE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenRep FREE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OpenRep FREE.  If not, see <http://www.gnu.org/licenses/>.*/

/* A Dialog containing the Reversed Materia Medica
 *
 * Created on August 20, 2008, 11:59 AM
 */

package prescriber;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;

/**
 *
 * @author  vladimir
 */
public class ReversedMMDialog extends javax.swing.JDialog {
    /** contains the instance of the currently opened repertory*/
    public Repertory current_repertory = null; 
    /** contains the instance of the main Database*/    
    public Database current_database = null;
    
    /** contains the number of remedies */
    private int remedy_cnt = 0;

    /** contains the remedy grade for which we want to display the symptoms*/    
    private int remedy_grade = 1;
    
    /** contains the last selected remedy name*/
    private String remedy_name = "";
    
    /** index of the currently opened repertory*/
    private int current_repertory_id = -1;
    
    /** contains the list of symptoms from the currently selected remedy*/
    private ArrayList<Symptom> current_symptoms = null;

    /** instance of main editor */
    PrescriberView main_editor;
    
    /** Creates new form ReversedMMDialog */
    public ReversedMMDialog(java.awt.Frame parent, boolean modal, Repertory rep, Database db, PrescriberView pw) {
        super(parent, modal);
        this.main_editor = pw;
        current_repertory = rep;
        current_database = db;
        current_repertory_id = GetCurrentRepertoryIndex();
        initComponents();

        int size = pw.config.GetValue(Configuration.Key_ReversedMMDialog_RemedyTree);
        Font ft;
        if (size != -1) {
            ft = new Font(RemedyTree.getFont().getName(), RemedyTree.getFont().getStyle(), size);
            RemedyTree.setFont(ft);
        }

        size = pw.config.GetValue(Configuration.Key_ReversedMMDialog_SymptomTree);
        if (size != -1) {
            ft = new Font(SymptomTree.getFont().getName(), SymptomTree.getFont().getStyle(), size);
            SymptomTree.setFont(ft);
        }

        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Results");

        ArrayList<String> rems = new ArrayList();
        for (int x = 0; x < current_repertory.GetRemedies().size(); x++) {
            if (current_repertory.GetRemedies().get(x) == null) continue;
            rems.add(current_repertory.GetRemedies().get(x).RemName);
        }
        Collections.sort(rems);
        remedy_cnt = rems.size();
        for (int x = 0; x < rems.size(); x++) {
            DefaultMutableTreeNode temp = new DefaultMutableTreeNode(rems.get(x));
            top.add(temp);
        }
        JTree temp = new JTree (top);
        RemedyTree.setModel(temp.getModel());
        UpdateStatusLabel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        GenerateMMButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        RemedyGradeButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        SearchEdit = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        RemedyTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        SymptomTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        SymptomLabel = new javax.swing.JLabel();
        RemedyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(prescriber.PrescriberApp.class).getContext().getResourceMap(ReversedMMDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        GenerateMMButton.setIcon(resourceMap.getIcon("GenerateMMButton.icon")); // NOI18N
        GenerateMMButton.setText(resourceMap.getString("GenerateMMButton.text")); // NOI18N
        GenerateMMButton.setToolTipText(resourceMap.getString("GenerateMMButton.toolTipText")); // NOI18N
        GenerateMMButton.setFocusable(false);
        GenerateMMButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GenerateMMButton.setName("GenerateMMButton"); // NOI18N
        GenerateMMButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        GenerateMMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateMMButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(GenerateMMButton);

        jSeparator1.setName("jSeparator1"); // NOI18N
        jToolBar1.add(jSeparator1);

        RemedyGradeButton.setIcon(resourceMap.getIcon("RemedyGradeButton.icon")); // NOI18N
        RemedyGradeButton.setText(resourceMap.getString("RemedyGradeButton.text")); // NOI18N
        RemedyGradeButton.setToolTipText(resourceMap.getString("RemedyGradeButton.toolTipText")); // NOI18N
        RemedyGradeButton.setFocusable(false);
        RemedyGradeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RemedyGradeButton.setName("RemedyGradeButton"); // NOI18N
        RemedyGradeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RemedyGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemedyGradeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(RemedyGradeButton);

        jSeparator2.setName("jSeparator2"); // NOI18N
        jToolBar1.add(jSeparator2);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jToolBar1.add(jLabel1);

        SearchEdit.setText(resourceMap.getString("SearchEdit.text")); // NOI18N
        SearchEdit.setMinimumSize(new java.awt.Dimension(150, 27));
        SearchEdit.setName("SearchEdit"); // NOI18N
        SearchEdit.setPreferredSize(new java.awt.Dimension(550, 27));
        SearchEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchEditKeyReleased(evt);
            }
        });
        jToolBar1.add(SearchEdit);

        SearchButton.setIcon(resourceMap.getIcon("SearchButton.icon")); // NOI18N
        SearchButton.setText(resourceMap.getString("SearchButton.text")); // NOI18N
        SearchButton.setToolTipText(resourceMap.getString("SearchButton.toolTipText")); // NOI18N
        SearchButton.setFocusable(false);
        SearchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SearchButton.setName("SearchButton"); // NOI18N
        SearchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SearchButton);

        jSplitPane1.setDividerLocation(160);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        RemedyTree.setModel(null);
        RemedyTree.setName("RemedyTree"); // NOI18N
        RemedyTree.setRootVisible(false);
        RemedyTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemedyTreeMouseClicked(evt);
            }
        });
        RemedyTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RemedyTreeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(RemedyTree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        SymptomTree.setModel(null);
        SymptomTree.setName("SymptomTree"); // NOI18N
        SymptomTree.setRootVisible(false);
        SymptomTree.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SymptomTreeKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(SymptomTree);

        jSplitPane1.setRightComponent(jScrollPane2);

        jPanel1.setName("jPanel1"); // NOI18N

        SymptomLabel.setFont(resourceMap.getFont("SymptomLabel.font")); // NOI18N
        SymptomLabel.setForeground(resourceMap.getColor("SymptomLabel.foreground")); // NOI18N
        SymptomLabel.setText(resourceMap.getString("SymptomLabel.text")); // NOI18N
        SymptomLabel.setName("SymptomLabel"); // NOI18N

        RemedyLabel.setFont(resourceMap.getFont("RemedyLabel.font")); // NOI18N
        RemedyLabel.setForeground(resourceMap.getColor("RemedyLabel.foreground")); // NOI18N
        RemedyLabel.setText(resourceMap.getString("RemedyLabel.text")); // NOI18N
        RemedyLabel.setName("RemedyLabel"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(665, Short.MAX_VALUE)
                .add(RemedyLabel)
                .add(18, 18, 18)
                .add(SymptomLabel))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(SymptomLabel)
                .add(RemedyLabel))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /** Converts the treepath of the SymptomList to the correct name of the symptom
     * 
     * @param tp
     * @return
     */
    private String ConvertTreePathToRemedyName (TreePath tp) {    
       String temps = "";
       if (tp == null) return "";
       for (int x = 1; x < tp.getPathCount(); x++)                
            temps += tp.getPath()[x].toString();
       return temps;
    }

    /**  Updates the status label
     *
     */
    public void UpdateStatusLabel() {
        RemedyLabel.setText(remedy_cnt+" Arzneien");
        try {
            SymptomLabel.setText(current_symptoms.size()+" Symptome");
        } catch (Exception e) {}
    }

/** A renderer used to add colors, formatting and icons to the SymptomTree
 * 
 */
private class SymptomTreeRenderer extends DefaultTreeCellRenderer {

        public SymptomTreeRenderer() {
        }

        public Component getTreeCellRendererComponent(
                            JTree tree,
                            Object value,
                            boolean sel,
                            boolean expanded,
                            boolean leaf,
                            int row,
                            boolean hasFocus) {

            super.getTreeCellRendererComponent(
                            tree, value, sel,
                            expanded, leaf, row,
                            hasFocus);  
            DefaultMutableTreeNode node =
                    (DefaultMutableTreeNode)value;            
            int rem_grade = -1;
            try{
                Symptom xs = (SearchSymptom)node.getUserObject();
                rem_grade = xs.grade;
            }
            catch (Exception e) {
                
            }
            if (rem_grade != -1) {
                if (rem_grade < 1) {
                    Font f = new Font(getFont().getName(), Font.ITALIC, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.GRAY);
                }
                else
                if (rem_grade == 1) {
                    Font f = new Font(getFont().getName(), Font.PLAIN, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.GRAY);
                }
                else
                if (rem_grade == 2) {
                    Font f = new Font(getFont().getName(), Font.PLAIN, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.BLACK);
                }                    
                else
                if (rem_grade == 3) {
                    Font f = new Font(getFont().getName(), Font.PLAIN, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.BLUE);
                }
                else
                if (rem_grade == 4) {
                    Font f = new Font(getFont().getName(), Font.PLAIN, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.RED);
                }
                else
                if (rem_grade >= 5) {
                    Font f = new Font(getFont().getName(), Font.BOLD, SymptomTree.getFont().getSize());
                    setFont(f);
                    setForeground(java.awt.Color.RED);
                }
            }
             return this;
            }                                
        }
    
    /** Returns the index of currently opened repertory
     * 
     * @return
     */
    public int GetCurrentRepertoryIndex() {
        for (int x = 0; x < current_database.GetRepertoryCount(); x++) {
            if (current_database.GetRepertory(x).equals(current_repertory)) return x;
        }
        return -1;
    }

    /** Updates the data of the main SymptomTree
     * 
     * @param keywords
     */
    private void UpdateSymptomTree (String keywords) {
       current_symptoms = current_repertory.GetSymptoms(current_repertory.GetRemedyIndex(remedy_name));
       ArrayList<SearchSymptom> result = null;
       if (!keywords.trim().equals("")) {
            result = new ArrayList();
            String[] search_phrases = Utils.SplitSearchString(keywords, Utils.SPLIT_CHAR, false);
            for (int x = 0; x < search_phrases.length; x++) {
                if (search_phrases[x].trim().equals("")) continue;
                if (!search_phrases[x].trim().startsWith(String.valueOf(Utils.NEGATIVE_CHAR))) {
                    ArrayList<SearchSymptom> temp_results = new ArrayList();
                    temp_results = current_repertory.SearchInSymptoms(search_phrases[x], current_symptoms, current_database, current_repertory_id);
                    for (int y = 0; y < temp_results.size(); y++) {
                        boolean fnd = false;
                        for (int z = 0; z < result.size(); z++) {
                            if (temp_results.get(y).id == result.get(z).id) {
                                fnd = true;
                                break;
                            }
                        }
                        if (!fnd) result.add(temp_results.get(y));
                    }
                }                
            }
            for (int x = 0; x < search_phrases.length; x++) {
                if (search_phrases[x].trim().equals("")) continue;
                if (search_phrases[x].trim().startsWith(String.valueOf(Utils.NEGATIVE_CHAR))) {
                    search_phrases[x] = search_phrases[x].trim().substring(1);
                    ArrayList<SearchSymptom> temp_results = new ArrayList();                    
                    temp_results = current_repertory.SearchInSymptoms(search_phrases[x], current_symptoms, current_database, current_repertory_id);
                    for (int y = 0; y < temp_results.size(); y++) {
                        for (int z = 0; z < result.size(); z++) {
                            if (temp_results.get(y).id == result.get(z).id) {
                                result.remove(z);
                                break;
                            }
                        }
                    }
                }
            }                        
       }
       Collections.sort(current_symptoms);
       UpdateStatusLabel();
       DefaultMutableTreeNode top = new DefaultMutableTreeNode("Results");
       for (int x = 0; x < current_symptoms.size(); x++) {
           if (result != null) {
                for (int y = 0; y < result.size(); y++) {
                    if (result.get(y).id == current_symptoms.get(x).id && current_symptoms.get(x).grade >= remedy_grade) {
                        DefaultMutableTreeNode temp = new DefaultMutableTreeNode(current_symptoms.get(x).GetSearchSymptom());
                        top.add(temp);                   
                    }
                }
           }
           else {              
                if (current_symptoms.get(x).grade >= remedy_grade) {
                    DefaultMutableTreeNode temp = new DefaultMutableTreeNode(current_symptoms.get(x).GetSearchSymptom());
                    top.add(temp);
                }            
           }
       }
       JTree temp = new JTree (top);
       SymptomTree.setCellRenderer(new SymptomTreeRenderer());
       SymptomTree.setModel(temp.getModel());
       SymptomTree.invalidate();
       SymptomTree.repaint();
    }
    
private void GenerateMMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateMMButtonActionPerformed
    if (RemedyTree.getSelectionCount() != 1) {
        JOptionPane.showMessageDialog(rootPane, "Please select a single remedy to generate the list of symptoms");
        return;
    }
    remedy_name = ConvertTreePathToRemedyName(RemedyTree.getSelectionPath());
    try {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        UpdateSymptomTree(SearchEdit.getText());
    } finally {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
}//GEN-LAST:event_GenerateMMButtonActionPerformed

private void RemedyGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemedyGradeButtonActionPerformed
   Integer[] sel_values = new Integer[current_repertory.GetMaximumGrade()];
   for (int x = 0; x < sel_values.length; x++)
       sel_values[x] = x+1;
   try {
        remedy_grade = (Integer)JOptionPane.showInputDialog(null, "Bitte wählen Sie die Arzneiwertigkeit.", "", javax.swing.JOptionPane.INFORMATION_MESSAGE, null, sel_values, remedy_grade);
        UpdateSymptomTree(SearchEdit.getText());
   } finally {}
}//GEN-LAST:event_RemedyGradeButtonActionPerformed

private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
   UpdateSymptomTree(SearchEdit.getText());
}//GEN-LAST:event_SearchButtonActionPerformed

private void SearchEditKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchEditKeyReleased
   if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) SearchButtonActionPerformed(null);
}//GEN-LAST:event_SearchEditKeyReleased

private void RemedyTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemedyTreeMouseClicked
   if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount() > 1) {
       GenerateMMButtonActionPerformed(null);
   }
}//GEN-LAST:event_RemedyTreeMouseClicked

private void RemedyTreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RemedyTreeKeyPressed
    if (evt.isAltDown()) {
        if (evt.getKeyCode() == evt.VK_UP) {
            Utils.ChangeFont(RemedyTree, 1);
            main_editor.config.SetValue(Configuration.Key_ReversedMMDialog_RemedyTree, RemedyTree.getFont().getSize());
        }
        else
        if (evt.getKeyCode() == evt.VK_DOWN) {
            Utils.ChangeFont(RemedyTree, -1);
            main_editor.config.SetValue(Configuration.Key_ReversedMMDialog_RemedyTree, RemedyTree.getFont().getSize());
        }
    }
}//GEN-LAST:event_RemedyTreeKeyPressed

private void SymptomTreeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SymptomTreeKeyPressed
    if (evt.isAltDown()) {
        if (evt.getKeyCode() == evt.VK_UP) {
            Utils.ChangeFont(SymptomTree, 1);
            main_editor.config.SetValue(Configuration.Key_ReversedMMDialog_SymptomTree, SymptomTree.getFont().getSize());
        }
        else
        if (evt.getKeyCode() == evt.VK_DOWN) {
            Utils.ChangeFont(SymptomTree, -1);
            main_editor.config.SetValue(Configuration.Key_ReversedMMDialog_SymptomTree, SymptomTree.getFont().getSize());
        }
    }
}//GEN-LAST:event_SymptomTreeKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GenerateMMButton;
    private javax.swing.JButton RemedyGradeButton;
    private javax.swing.JLabel RemedyLabel;
    private javax.swing.JTree RemedyTree;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchEdit;
    private javax.swing.JLabel SymptomLabel;
    private javax.swing.JTree SymptomTree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
